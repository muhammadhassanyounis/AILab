# -*- coding: utf-8 -*-
"""A* Algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oUkwtxXNAHZx7VF3kA37Ayy-xexdLaV-
"""

import heapq

graph = {
    "Lahore": {"Islamabad": 270, "Faisalabad": 180},
    "Islamabad": {"Lahore": 270, "Peshawar": 190},
    "Faisalabad": {"Lahore": 180, "Multan": 220},
    "Multan": {"Faisalabad": 220, "Karachi": 880},
    "Peshawar": {"Islamabad": 190},
    "Karachi": {"Multan": 880}
}
heuristic = {
    "Lahore": 1210,
    "Islamabad": 1100,
    "Faisalabad": 1050,
    "Multan": 880,
    "Peshawar": 1250,
    "Karachi": 0
}
def a_star(graph, start, goal, heuristic):
    """
    A* search returns (path, total_cost) or (None, inf) if no path found.
    We store paths in the priority queue together with their f-cost = g + h.
    """
    open_list = []
    heapq.heappush(open_list, (heuristic[start], [start]))
    g_costs = {start: 0}
    closed_set = set()


    while open_list:
        f, path = heapq.heappop(open_list)
        node = path[-1]


        if node == goal:
            return path, g_costs[node]


        if node in closed_set:
            continue

        closed_set.add(node)

        for neighbor, cost in graph[node].items():
            tentative_g = g_costs[node] + cost


            if neighbor not in g_costs or tentative_g < g_costs[neighbor]:
                g_costs[neighbor] = tentative_g
                f_cost = tentative_g + heuristic.get(neighbor, float('inf'))
                new_path = path + [neighbor]
                heapq.heappush(open_list, (f_cost, new_path))


    return None, float('inf')


if __name__ == "__main__":
    start_city = "Lahore"
    goal_city = "Karachi"
    path, cost = a_star(graph, start_city, goal_city, heuristic)
    print("A* path:", path)
    print("Total cost:", cost)